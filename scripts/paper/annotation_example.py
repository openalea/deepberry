import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from skimage import io

from deepberry.src.openalea.deepberry.utils import ellipse_interpolation

# dir containing image_test folder
DIR_DATASET = 'data/grapevine/dataset/dataset_raw/'

# where images generated by this script are saved
DIR_OUTPUT = 'data/grapevine/paper/fig_segmentation_output/'
if not os.path.isdir(DIR_OUTPUT):
    os.mkdir(DIR_OUTPUT)

# =====================================================================================================================

import json

# image_name = np.random.choice(os.listdir(DIR_DATASET + 'image_train'))
image_name = 'ARCH2022-05-18_334_5910_30.png'

img = cv2.cvtColor(cv2.imread(DIR_DATASET + 'image_train/{}'.format(image_name)), cv2.COLOR_BGR2RGB)
with open(DIR_DATASET + 'label_train' + '/' + image_name.replace('.png', '.json')) as f:
    anot = json.load(f)


def init_plot():
    plt.imshow(img)
    plt.xlim((584, 995))
    plt.ylim((1740, 1280))
    plt.xticks([], [])
    plt.yticks([], [])


plt.subplot(1, 2, 1)
init_plot()
for shape in anot['shapes']:
    # plot raw points
    points = np.array(shape['points']).reshape((-1, 1, 2)).astype(int)
    points = np.concatenate((points, np.array([points[0]])))
    plt.plot(points[:, :, 0], points[:, :, 1], 'r-o')

plt.subplot(1, 2, 2)
init_plot()
for shape in anot['shapes']:
    # plot raw points
    points = np.array(shape['points']).reshape((-1, 1, 2)).astype(int)
    points = np.concatenate((points, np.array([points[0]])))
    plt.plot(points[:, :, 0], points[:, :, 1], 'r-o', alpha=0.5)

    # ellipse fit
    (ell_x, ell_y), (ell_w, ell_h), ell_a = cv2.fitEllipse(points)
    lsp_x, lsp_y = ellipse_interpolation(x=ell_x, y=ell_y, w=ell_w, h=ell_h, a=ell_a, n_points=100)

    # # plot box
    # x, y, w, h = ell_x, ell_y, max(lsp_x) - min(lsp_x), max(lsp_y) - min(lsp_y)
    # plt.plot([x - w/2, x - w/2, x + w/2, x + w/2, x - w/2], [y + h/2, y - h/2, y - h/2, y + h/2, y + h/2], 'b-')

    # plot ellipse
    plt.plot(lsp_x, lsp_y, 'b-')





fig, ax = plt.subplots()

for _, row in anot.iterrows():

    if row['type'] == 'pred':
        x, y, w, h, a = row[['ell_x', 'ell_y', 'ell_w', 'ell_h', 'ell_a']]
        lsp_x, lsp_y = ellipse_interpolation(x=x, y=y, w=w, h=h, a=a, n_points=100)
        plt.plot(lsp_x, lsp_y, linestyle=linestyle, linewidth=linewidth, color=col)

    x0, y0 = xy[image_name]
    plt.xlim((x0, x0 + 500))
    plt.ylim((y0 + 500, y0))

    plt.close('all')
    ax.axis('off')
    fig.tight_layout(pad=0)
    ax.margins(0)
    fig.canvas.draw()
    image_from_plot = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    image_from_plot = image_from_plot.reshape(fig.canvas.get_width_height()[::-1] + (3,))

    image_from_plot = image_from_plot[:, 80:(640 - 80)]

    io.imsave(DIR_OUTPUT + 'valid{}.png'.format(k_img), image_from_plot)


import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from skimage import io

from deepberry.src.openalea.deepberry.utils import ellipse_interpolation

# directory containing training dataset images
DIR_DATASET = 'data/grapevine/dataset/'

# directory containing outputs of the segmentation pipeline for the validation dataset
DIR_VALIDATION = 'data/grapevine/validation/'

# where images generated by this script are saved
DIR_OUTPUT = 'data/grapevine/paper/fig_segmentation_output/'
if not os.path.isdir(DIR_OUTPUT):
    os.mkdir(DIR_OUTPUT)

df_val = pd.read_csv(DIR_VALIDATION + 'validation_segmentation_ell.csv')
df_val['exp'] = [n.split('_')[0] for n in df_val['image_name']]

# =====================================================================================================================

image_names = df_val[df_val['exp'] == 'ARCH2022-05-18']['image_name'].unique()

# top-left coordinate for the vignette
xy = {
    'ARCH2022-05-18_1022_5688_0.png': (1150, 1130),
    'ARCH2022-05-18_1599_5924_30.png': (240, 1600),
    'ARCH2022-05-18_1652_5924_30.png': (100, 1420),
    'ARCH2022-05-18_1685_5601_180.png': (1250, 900),
    'ARCH2022-05-18_1715_5899_0.png': (850, 1440),
    'ARCH2022-05-18_22_5928_0.png': (800, 960),
    'ARCH2022-05-18_2420_5931_0.png': (1050, 1300),
    'ARCH2022-05-18_2448_6054_60.png': (1500, 1200),
    'ARCH2022-05-18_2532_5992_30.png': (790, 1180),
    'ARCH2022-05-18_2637_6085_270.png': (220, 500),
    'ARCH2022-05-18_531_5931_30.png': (270, 590),
    'ARCH2022-05-18_672_5601_150.png': (1250, 1200),
    'ARCH2022-05-18_725_5601_90.png': (900, 1100)
}

for k_img, image_name in enumerate(image_names):

    img = cv2.cvtColor(cv2.imread(DIR_DATASET + 'image_valid/{}'.format(image_name)), cv2.COLOR_BGR2RGB)

    s_seg = df_val[df_val['image_name'] == image_name]

    fig, ax = plt.subplots()
    plt.imshow(img)
    for _, row in s_seg.iterrows():
        col = 'greenyellow' if row['type'] == 'obs' else 'r'
        linestyle = '--' if row['type'] == 'obs' else '-'
        linewidth = 1.7 if row['type'] == 'obs' else 1.
        # if row['type'] == 'pred':
        #     x1, x2, y1, y2 = row[['x1', 'x2', 'y1', 'y2']]
        #     plt.plot([x1, x1, x2, x2, x1], [y1, y2, y2, y1, y1], linestyle=linestyle, linewidth=linewidth, color=col)
        x, y, w, h, a = row[['ell_x', 'ell_y', 'ell_w', 'ell_h', 'ell_a']]
        lsp_x, lsp_y = ellipse_interpolation(x=x, y=y, w=w, h=h, a=a, n_points=100)
        plt.plot(lsp_x, lsp_y, linestyle=linestyle, linewidth=linewidth, color=col)

    x0, y0 = xy[image_name]
    plt.xlim((x0, x0 + 500))
    plt.ylim((y0 + 500, y0))

    plt.close('all')
    ax.axis('off')
    fig.tight_layout(pad=0)
    ax.margins(0)
    fig.canvas.draw()
    image_from_plot = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    image_from_plot = image_from_plot.reshape(fig.canvas.get_width_height()[::-1] + (3,))

    image_from_plot = image_from_plot[:, 80:(640 - 80)]

    io.imsave(DIR_OUTPUT + 'valid{}.png'.format(k_img), image_from_plot)







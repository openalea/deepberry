import os
import pandas as pd
import cv2
import matplotlib.pyplot as plt
import numpy as np

from deepberry.src.openalea.deepberry.utils import ellipse_interpolation

# where files generated by this script are saved
DIR_OUTPUT = 'data/grapevine/paper/fig_segmentation_pipeline/'
if not os.path.isdir(DIR_OUTPUT):
    os.mkdir(DIR_OUTPUT)

exp, plantid, task, angle = 'ARCH2021-05-27', 7794, 3786, 210

# ===== load image from index and run the pipeline on it ==============================================================

from deepberry.src.openalea.deepberry.segmentation import detect_berry, segment_berry, load_models_berry

index = pd.read_csv('data/grapevine/image_index.csv')
index = index[index['imgangle'].notnull()]

row_index = index[(index['exp'] == exp) & (index['plantid'] == plantid) &
                  (index['taskid'] == task) & (index['imgangle'] == angle)].iloc[0]

img_path = 'Z:/{}/{}/{}.png'.format(row_index['exp'], row_index['taskid'], row_index['imgguid'])
img = cv2.cvtColor(cv2.imread(img_path), cv2.COLOR_BGR2RGB)

MODEL_DET, MODEL_SEG = load_models_berry('Y:/lepseBinaries/Trained_model/deepberry/new/')

res_det = detect_berry(image=img, model=MODEL_DET, score_threshold=0.985)
pred = segment_berry(image=img, model=MODEL_SEG, boxes=res_det)

cv2.imwrite(DIR_OUTPUT + 'image.png', cv2.cvtColor(img, cv2.COLOR_RGB2BGR))
res_det.to_csv(DIR_OUTPUT + 'detection.csv', index=False)
pred.to_csv(DIR_OUTPUT + 'segmentation.csv', index=False)

# ===========================================================

img = cv2.cvtColor(cv2.imread(DIR_OUTPUT + 'image.png'), cv2.COLOR_BGR2RGB)
res_det = pd.read_csv(DIR_OUTPUT + 'detection.csv')
pred = pd.read_csv(DIR_OUTPUT + 'segmentation.csv')

plt.imshow(img)
for _, row in res_det.iterrows():
    x, y, w, h = row[['x', 'y', 'w', 'h']]
    plt.plot([x, x, x + w, x + w, x], [y, y + h, y + h, y, y], 'b-')
for _, row in pred.iterrows():
    x, y, w, h, a = row[['ell_x', 'ell_y', 'ell_w', 'ell_h', 'ell_a']]
    lsp_x, lsp_y = ellipse_interpolation(x=x, y=y, w=w, h=h, a=a, n_points=100)
    plt.plot(lsp_x, lsp_y, 'r-')

# detection vignette
w, px_spacing = 416, 270
Y = list(np.arange(0, img.shape[0] - w, px_spacing)) + [img.shape[0] - w]
X = list(np.arange(0, img.shape[1] - w, px_spacing)) + [img.shape[1] - w]
for x in X:
    for y in Y:
        plt.plot(x, y, 'o', color='grey')

plt.plot([x, x, x + w - 1, x + w - 1, x], [y, y + w - 1, y + w - 1, y, y], '-', color='grey')
